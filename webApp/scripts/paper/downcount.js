(function ($) { var interval; $.fn.downCount = function (options, callback) { var settings = $.extend({ date: null }, options); if (settings.date > 0) { if (!settings.date) { $.error("日期未定义") } var container = this; var currentDate = function () { var date = new Date(); var utc = date.getTime() + (date.getTimezoneOffset() * 60000); var new_date = new Date(utc + (3600000 * 8)); return new_date }; var dateStr = convertDate(settings.date); function countdown() { var target_date = new Date(dateStr), current_date = currentDate(); var difference = target_date - current_date; if (difference < 0) { window.clearInterval(interval); if (callback && typeof callback === "function") { callback() } return } var _second = 1000, _minute = _second * 60, _hour = _minute * 60, _day = _hour * 24; var days = Math.floor(difference / _day), hours = Math.floor((difference % _day) / _hour), minutes = Math.floor((difference % _hour) / _minute), seconds = Math.floor((difference % _minute) / _second); days = (String(days).length >= 2) ? days : "0" + days; hours = (String(hours).length >= 2) ? hours : "0" + hours; minutes = (String(minutes).length >= 2) ? minutes : "0" + minutes; seconds = (String(seconds).length >= 2) ? seconds : "0" + seconds; var ref_days = (days === 1) ? "day" : "days", ref_hours = (hours === 1) ? "hour" : "hours", ref_minutes = (minutes === 1) ? "minute" : "minutes", ref_seconds = (seconds === 1) ? "second" : "seconds"; container.find(".days").text(days); container.find(".hours").text(hours); container.find(".minutes").text(minutes); container.find(".seconds").text(seconds); container.find(".days_ref").text(ref_days); container.find(".hours_ref").text(ref_hours); container.find(".minutes_ref").text(ref_minutes); container.find(".seconds_ref").text(ref_seconds) } function convertDate(m) { Date.prototype.Format = function (fmt) { var o = { "M+": this.getMonth() + 1, "d+": this.getDate(), "h+": this.getHours(), "m+": this.getMinutes(), "s+": this.getSeconds(), "q+": Math.floor((this.getMonth() + 3) / 3), "S": this.getMilliseconds() }; if (/(y+)/.test(fmt)) { fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)) } for (var k in o) { if (new RegExp("(" + k + ")").test(fmt)) { fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length))) } } return fmt }; var myD = new Date(); myD.setMinutes(myD.getMinutes() + parseInt(m), myD.getSeconds(), 0); return myD.Format("MM/dd/yyyy hh:mm:ss") } interval = setInterval(countdown, 1000) } else { window.clearInterval(interval) } } })(jQuery);